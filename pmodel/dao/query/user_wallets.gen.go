// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/QuantumShiftX/farms-pkg/pmodel/dao/model"
)

func newUserWallet(db *gorm.DB, opts ...gen.DOOption) userWallet {
	_userWallet := userWallet{}

	_userWallet.userWalletDo.UseDB(db, opts...)
	_userWallet.userWalletDo.UseModel(&model.UserWallet{})

	tableName := _userWallet.userWalletDo.TableName()
	_userWallet.ALL = field.NewAsterisk(tableName)
	_userWallet.ID = field.NewInt64(tableName, "id")
	_userWallet.UserID = field.NewInt64(tableName, "user_id")
	_userWallet.WalletAddress = field.NewString(tableName, "wallet_address")
	_userWallet.WalletName = field.NewString(tableName, "wallet_name")
	_userWallet.WalletType = field.NewString(tableName, "wallet_type")
	_userWallet.UsageType = field.NewInt16(tableName, "usage_type")
	_userWallet.IsDefaultDeposit = field.NewInt16(tableName, "is_default_deposit")
	_userWallet.IsDefaultWithdrawal = field.NewInt16(tableName, "is_default_withdrawal")
	_userWallet.Status = field.NewInt16(tableName, "status")
	_userWallet.CreatedAt = field.NewInt64(tableName, "created_at")
	_userWallet.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_userWallet.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_userWallet.fillFieldMap()

	return _userWallet
}

type userWallet struct {
	userWalletDo userWalletDo

	ALL                 field.Asterisk
	ID                  field.Int64  // 主键
	UserID              field.Int64  // 用户ID
	WalletAddress       field.String // 钱包地址
	WalletName          field.String // 钱包名称/备注
	WalletType          field.String // 钱包类型(ETH/BTC等)
	UsageType           field.Int16  // 用途类型: 1-仅存款; 2-仅提款; 3-存款和提款
	IsDefaultDeposit    field.Int16  // 是否默认存款地址: 1-否; 2-是
	IsDefaultWithdrawal field.Int16  // 是否默认提款地址: 1-否; 2-是
	Status              field.Int16  // 状态: 1-正常; 2-禁用
	CreatedAt           field.Int64  // 创建时间
	UpdatedAt           field.Int64  // 更新时间
	DeletedAt           field.Int64  // 删除时间

	fieldMap map[string]field.Expr
}

func (u userWallet) Table(newTableName string) *userWallet {
	u.userWalletDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userWallet) As(alias string) *userWallet {
	u.userWalletDo.DO = *(u.userWalletDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userWallet) updateTableName(table string) *userWallet {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.UserID = field.NewInt64(table, "user_id")
	u.WalletAddress = field.NewString(table, "wallet_address")
	u.WalletName = field.NewString(table, "wallet_name")
	u.WalletType = field.NewString(table, "wallet_type")
	u.UsageType = field.NewInt16(table, "usage_type")
	u.IsDefaultDeposit = field.NewInt16(table, "is_default_deposit")
	u.IsDefaultWithdrawal = field.NewInt16(table, "is_default_withdrawal")
	u.Status = field.NewInt16(table, "status")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.DeletedAt = field.NewInt64(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userWallet) WithContext(ctx context.Context) *userWalletDo {
	return u.userWalletDo.WithContext(ctx)
}

func (u userWallet) TableName() string { return u.userWalletDo.TableName() }

func (u userWallet) Alias() string { return u.userWalletDo.Alias() }

func (u userWallet) Columns(cols ...field.Expr) gen.Columns { return u.userWalletDo.Columns(cols...) }

func (u *userWallet) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userWallet) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 12)
	u.fieldMap["id"] = u.ID
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["wallet_address"] = u.WalletAddress
	u.fieldMap["wallet_name"] = u.WalletName
	u.fieldMap["wallet_type"] = u.WalletType
	u.fieldMap["usage_type"] = u.UsageType
	u.fieldMap["is_default_deposit"] = u.IsDefaultDeposit
	u.fieldMap["is_default_withdrawal"] = u.IsDefaultWithdrawal
	u.fieldMap["status"] = u.Status
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userWallet) clone(db *gorm.DB) userWallet {
	u.userWalletDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userWallet) replaceDB(db *gorm.DB) userWallet {
	u.userWalletDo.ReplaceDB(db)
	return u
}

type userWalletDo struct{ gen.DO }

func (u userWalletDo) Debug() *userWalletDo {
	return u.withDO(u.DO.Debug())
}

func (u userWalletDo) WithContext(ctx context.Context) *userWalletDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userWalletDo) ReadDB() *userWalletDo {
	return u.Clauses(dbresolver.Read)
}

func (u userWalletDo) WriteDB() *userWalletDo {
	return u.Clauses(dbresolver.Write)
}

func (u userWalletDo) Session(config *gorm.Session) *userWalletDo {
	return u.withDO(u.DO.Session(config))
}

func (u userWalletDo) Clauses(conds ...clause.Expression) *userWalletDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userWalletDo) Returning(value interface{}, columns ...string) *userWalletDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userWalletDo) Not(conds ...gen.Condition) *userWalletDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userWalletDo) Or(conds ...gen.Condition) *userWalletDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userWalletDo) Select(conds ...field.Expr) *userWalletDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userWalletDo) Where(conds ...gen.Condition) *userWalletDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userWalletDo) Order(conds ...field.Expr) *userWalletDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userWalletDo) Distinct(cols ...field.Expr) *userWalletDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userWalletDo) Omit(cols ...field.Expr) *userWalletDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userWalletDo) Join(table schema.Tabler, on ...field.Expr) *userWalletDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userWalletDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userWalletDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userWalletDo) RightJoin(table schema.Tabler, on ...field.Expr) *userWalletDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userWalletDo) Group(cols ...field.Expr) *userWalletDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userWalletDo) Having(conds ...gen.Condition) *userWalletDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userWalletDo) Limit(limit int) *userWalletDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userWalletDo) Offset(offset int) *userWalletDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userWalletDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userWalletDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userWalletDo) Unscoped() *userWalletDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userWalletDo) Create(values ...*model.UserWallet) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userWalletDo) CreateInBatches(values []*model.UserWallet, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userWalletDo) Save(values ...*model.UserWallet) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userWalletDo) First() (*model.UserWallet, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserWallet), nil
	}
}

func (u userWalletDo) Take() (*model.UserWallet, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserWallet), nil
	}
}

func (u userWalletDo) Last() (*model.UserWallet, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserWallet), nil
	}
}

func (u userWalletDo) Find() ([]*model.UserWallet, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserWallet), err
}

func (u userWalletDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserWallet, err error) {
	buf := make([]*model.UserWallet, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userWalletDo) FindInBatches(result *[]*model.UserWallet, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userWalletDo) Attrs(attrs ...field.AssignExpr) *userWalletDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userWalletDo) Assign(attrs ...field.AssignExpr) *userWalletDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userWalletDo) Joins(fields ...field.RelationField) *userWalletDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userWalletDo) Preload(fields ...field.RelationField) *userWalletDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userWalletDo) FirstOrInit() (*model.UserWallet, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserWallet), nil
	}
}

func (u userWalletDo) FirstOrCreate() (*model.UserWallet, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserWallet), nil
	}
}

func (u userWalletDo) FindByPage(offset int, limit int) (result []*model.UserWallet, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userWalletDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userWalletDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userWalletDo) Delete(models ...*model.UserWallet) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userWalletDo) withDO(do gen.Dao) *userWalletDo {
	u.DO = *do.(*gen.DO)
	return u
}
