// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/QuantumShiftX/farms-pkg/pmodel/dao/model"
)

func newUserBalance(db *gorm.DB, opts ...gen.DOOption) userBalance {
	_userBalance := userBalance{}

	_userBalance.userBalanceDo.UseDB(db, opts...)
	_userBalance.userBalanceDo.UseModel(&model.UserBalance{})

	tableName := _userBalance.userBalanceDo.TableName()
	_userBalance.ALL = field.NewAsterisk(tableName)
	_userBalance.ID = field.NewInt64(tableName, "id")
	_userBalance.WalletType = field.NewInt16(tableName, "wallet_type")
	_userBalance.UserID = field.NewInt64(tableName, "user_id")
	_userBalance.Balance = field.NewInt64(tableName, "balance")
	_userBalance.LockedBalance = field.NewInt64(tableName, "locked_balance")
	_userBalance.Status = field.NewInt16(tableName, "status")
	_userBalance.CreatedAt = field.NewInt64(tableName, "created_at")
	_userBalance.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_userBalance.DeletedAt = field.NewInt64(tableName, "deleted_at")

	_userBalance.fillFieldMap()

	return _userBalance
}

type userBalance struct {
	userBalanceDo userBalanceDo

	ALL           field.Asterisk
	ID            field.Int64 // 主键ID
	WalletType    field.Int16 // 钱包类型：1-用户钱包，2-代理钱包，3-奖励钱包，4-USDT钱包
	UserID        field.Int64 // 用户ID
	Balance       field.Int64 // 可用余额
	LockedBalance field.Int64 // 锁定余额
	Status        field.Int16 // 状态：1-启用，2-禁用
	CreatedAt     field.Int64 // 创建时间（Unix时间戳）
	UpdatedAt     field.Int64 // 更新时间（Unix时间戳）
	DeletedAt     field.Int64 // 删除时间（Unix时间戳，0表示未删除）

	fieldMap map[string]field.Expr
}

func (u userBalance) Table(newTableName string) *userBalance {
	u.userBalanceDo.UseTable(newTableName)
	return u.updateTableName(newTableName)
}

func (u userBalance) As(alias string) *userBalance {
	u.userBalanceDo.DO = *(u.userBalanceDo.As(alias).(*gen.DO))
	return u.updateTableName(alias)
}

func (u *userBalance) updateTableName(table string) *userBalance {
	u.ALL = field.NewAsterisk(table)
	u.ID = field.NewInt64(table, "id")
	u.WalletType = field.NewInt16(table, "wallet_type")
	u.UserID = field.NewInt64(table, "user_id")
	u.Balance = field.NewInt64(table, "balance")
	u.LockedBalance = field.NewInt64(table, "locked_balance")
	u.Status = field.NewInt16(table, "status")
	u.CreatedAt = field.NewInt64(table, "created_at")
	u.UpdatedAt = field.NewInt64(table, "updated_at")
	u.DeletedAt = field.NewInt64(table, "deleted_at")

	u.fillFieldMap()

	return u
}

func (u *userBalance) WithContext(ctx context.Context) *userBalanceDo {
	return u.userBalanceDo.WithContext(ctx)
}

func (u userBalance) TableName() string { return u.userBalanceDo.TableName() }

func (u userBalance) Alias() string { return u.userBalanceDo.Alias() }

func (u userBalance) Columns(cols ...field.Expr) gen.Columns { return u.userBalanceDo.Columns(cols...) }

func (u *userBalance) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := u.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (u *userBalance) fillFieldMap() {
	u.fieldMap = make(map[string]field.Expr, 9)
	u.fieldMap["id"] = u.ID
	u.fieldMap["wallet_type"] = u.WalletType
	u.fieldMap["user_id"] = u.UserID
	u.fieldMap["balance"] = u.Balance
	u.fieldMap["locked_balance"] = u.LockedBalance
	u.fieldMap["status"] = u.Status
	u.fieldMap["created_at"] = u.CreatedAt
	u.fieldMap["updated_at"] = u.UpdatedAt
	u.fieldMap["deleted_at"] = u.DeletedAt
}

func (u userBalance) clone(db *gorm.DB) userBalance {
	u.userBalanceDo.ReplaceConnPool(db.Statement.ConnPool)
	return u
}

func (u userBalance) replaceDB(db *gorm.DB) userBalance {
	u.userBalanceDo.ReplaceDB(db)
	return u
}

type userBalanceDo struct{ gen.DO }

func (u userBalanceDo) Debug() *userBalanceDo {
	return u.withDO(u.DO.Debug())
}

func (u userBalanceDo) WithContext(ctx context.Context) *userBalanceDo {
	return u.withDO(u.DO.WithContext(ctx))
}

func (u userBalanceDo) ReadDB() *userBalanceDo {
	return u.Clauses(dbresolver.Read)
}

func (u userBalanceDo) WriteDB() *userBalanceDo {
	return u.Clauses(dbresolver.Write)
}

func (u userBalanceDo) Session(config *gorm.Session) *userBalanceDo {
	return u.withDO(u.DO.Session(config))
}

func (u userBalanceDo) Clauses(conds ...clause.Expression) *userBalanceDo {
	return u.withDO(u.DO.Clauses(conds...))
}

func (u userBalanceDo) Returning(value interface{}, columns ...string) *userBalanceDo {
	return u.withDO(u.DO.Returning(value, columns...))
}

func (u userBalanceDo) Not(conds ...gen.Condition) *userBalanceDo {
	return u.withDO(u.DO.Not(conds...))
}

func (u userBalanceDo) Or(conds ...gen.Condition) *userBalanceDo {
	return u.withDO(u.DO.Or(conds...))
}

func (u userBalanceDo) Select(conds ...field.Expr) *userBalanceDo {
	return u.withDO(u.DO.Select(conds...))
}

func (u userBalanceDo) Where(conds ...gen.Condition) *userBalanceDo {
	return u.withDO(u.DO.Where(conds...))
}

func (u userBalanceDo) Order(conds ...field.Expr) *userBalanceDo {
	return u.withDO(u.DO.Order(conds...))
}

func (u userBalanceDo) Distinct(cols ...field.Expr) *userBalanceDo {
	return u.withDO(u.DO.Distinct(cols...))
}

func (u userBalanceDo) Omit(cols ...field.Expr) *userBalanceDo {
	return u.withDO(u.DO.Omit(cols...))
}

func (u userBalanceDo) Join(table schema.Tabler, on ...field.Expr) *userBalanceDo {
	return u.withDO(u.DO.Join(table, on...))
}

func (u userBalanceDo) LeftJoin(table schema.Tabler, on ...field.Expr) *userBalanceDo {
	return u.withDO(u.DO.LeftJoin(table, on...))
}

func (u userBalanceDo) RightJoin(table schema.Tabler, on ...field.Expr) *userBalanceDo {
	return u.withDO(u.DO.RightJoin(table, on...))
}

func (u userBalanceDo) Group(cols ...field.Expr) *userBalanceDo {
	return u.withDO(u.DO.Group(cols...))
}

func (u userBalanceDo) Having(conds ...gen.Condition) *userBalanceDo {
	return u.withDO(u.DO.Having(conds...))
}

func (u userBalanceDo) Limit(limit int) *userBalanceDo {
	return u.withDO(u.DO.Limit(limit))
}

func (u userBalanceDo) Offset(offset int) *userBalanceDo {
	return u.withDO(u.DO.Offset(offset))
}

func (u userBalanceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *userBalanceDo {
	return u.withDO(u.DO.Scopes(funcs...))
}

func (u userBalanceDo) Unscoped() *userBalanceDo {
	return u.withDO(u.DO.Unscoped())
}

func (u userBalanceDo) Create(values ...*model.UserBalance) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Create(values)
}

func (u userBalanceDo) CreateInBatches(values []*model.UserBalance, batchSize int) error {
	return u.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (u userBalanceDo) Save(values ...*model.UserBalance) error {
	if len(values) == 0 {
		return nil
	}
	return u.DO.Save(values)
}

func (u userBalanceDo) First() (*model.UserBalance, error) {
	if result, err := u.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBalance), nil
	}
}

func (u userBalanceDo) Take() (*model.UserBalance, error) {
	if result, err := u.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBalance), nil
	}
}

func (u userBalanceDo) Last() (*model.UserBalance, error) {
	if result, err := u.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBalance), nil
	}
}

func (u userBalanceDo) Find() ([]*model.UserBalance, error) {
	result, err := u.DO.Find()
	return result.([]*model.UserBalance), err
}

func (u userBalanceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.UserBalance, err error) {
	buf := make([]*model.UserBalance, 0, batchSize)
	err = u.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (u userBalanceDo) FindInBatches(result *[]*model.UserBalance, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return u.DO.FindInBatches(result, batchSize, fc)
}

func (u userBalanceDo) Attrs(attrs ...field.AssignExpr) *userBalanceDo {
	return u.withDO(u.DO.Attrs(attrs...))
}

func (u userBalanceDo) Assign(attrs ...field.AssignExpr) *userBalanceDo {
	return u.withDO(u.DO.Assign(attrs...))
}

func (u userBalanceDo) Joins(fields ...field.RelationField) *userBalanceDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Joins(_f))
	}
	return &u
}

func (u userBalanceDo) Preload(fields ...field.RelationField) *userBalanceDo {
	for _, _f := range fields {
		u = *u.withDO(u.DO.Preload(_f))
	}
	return &u
}

func (u userBalanceDo) FirstOrInit() (*model.UserBalance, error) {
	if result, err := u.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBalance), nil
	}
}

func (u userBalanceDo) FirstOrCreate() (*model.UserBalance, error) {
	if result, err := u.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.UserBalance), nil
	}
}

func (u userBalanceDo) FindByPage(offset int, limit int) (result []*model.UserBalance, count int64, err error) {
	result, err = u.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = u.Offset(-1).Limit(-1).Count()
	return
}

func (u userBalanceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = u.Count()
	if err != nil {
		return
	}

	err = u.Offset(offset).Limit(limit).Scan(result)
	return
}

func (u userBalanceDo) Scan(result interface{}) (err error) {
	return u.DO.Scan(result)
}

func (u userBalanceDo) Delete(models ...*model.UserBalance) (result gen.ResultInfo, err error) {
	return u.DO.Delete(models)
}

func (u *userBalanceDo) withDO(do gen.Dao) *userBalanceDo {
	u.DO = *do.(*gen.DO)
	return u
}
